unit knsl2_HouseTask_Vzep;
interface
uses
 Windows, Classes, SysUtils,SyncObjs,stdctrls,comctrls,utltypes,utlbox,utlconst,utlmtimer,
 utldatabase,knsl3HolesFinder,knsl2qweryportpull,knsl2qweryarchmdl,
 knsl2module,knsl2meter,knsl3EventBox,knsl5config,knsl2IRunnable,utldynconnect,knsl2CThreadPull,
 knsl2EA8086Meter;
 type

    CMeterTaskVzep = class(IRunnable)
     private
      meter      : CMeter;
      outMsg     : CMessage;
      inMsg      : CMessage;
      connection : IConnection;
     protected
      procedure getInputBuffer(var V :PCMessageBuffer);
      procedure getIntBuffer(var V :PCIntBuffer);

     public
      constructor Create(var value:CMeter;var vParent:IRunnable;var vConnection:IConnection);
      destructor Destroy;override;
      function run:Integer;override;

      function getOutMsg:Integer;
      procedure getIntBufferADR(var V :PCIntBuffer);
//      function runCloseSession: Integer;
    End;


    CHouseTaskVzep = class(IRunnable)
     private
      dtBegin      : TDateTime;
      dtEnd        : TDateTime;
      cmd          : Integer;
      gid          : Integer;
      aid          : Integer;
      mid          : Integer;
      isFind       : Integer;
      ErrorPercent : double;
      meterPull    : CThreadPull;
      portPull     : TThreadList;
      taskUndex    : Integer;
      inMessageBuffer : CMessageBuffer;
      intBuffer    : CIntBuffer;
      inBufferADR  : CIntBuffer;
     private
      function getPortPull(plid:Integer):CPortPull;
      function isManyErrors(pDb:CDBDynamicConn;aid:Integer;vErrorPercent:double):boolean;
      function cmdToCls(cmd:Integer):Integer;
      function getL2Instance(dynConnect:CDBDynamicConn;mid:Integer):CMeter;
     public
      function getAboID:integer;
      function getParamID:integer;
    
      constructor Create(vDtBegin,vDtEnd:TDateTime;
                              vCmd:Integer;
                              vGid :Integer;
                              vAid :Integer;
                              vMid :Integer;
                              vIsFind : Integer;
                              vErrorPercent : double;
                              vPortPull:TThreadList;
                              vTaskIndex:Integer;
                              var vMeterPull:CThreadPull;
                              var vParent : IRunnable);

      destructor Destroy;override;
      function run:Integer;override;
    End;

implementation

constructor CMeterTaskVzep.Create(var value:CMeter;{vPortPull:TThreadList;}var vParent:IRunnable;var vConnection:IConnection);
Begin
    meter    := value;
    id       := meter.m_nP.m_swMID;
    //portpull := vPortPull;
    state    := TASK_STATE_RUN;
    parent   := vParent;
    connection := vConnection;
End;

destructor CMeterTaskVzep.Destroy;
Begin
    inherited;
    //if meter<>nil then meter.Destroy;
End;

procedure CMeterTaskVzep.getInputBuffer(var V :PCMessageBuffer);
begin
  if parent is CHouseTaskVzep then
    V := @(CHouseTaskVzep(parent).inMessageBuffer)
  else V := nil;
end;
procedure CMeterTaskVzep.getIntBuffer(var V :PCIntBuffer);
begin
  if parent is CHouseTaskVzep then
    V := @(CHouseTaskVzep(parent).intBuffer)
  else V := nil;
end;

procedure CMeterTaskVzep.getIntBufferADR(var V :PCIntBuffer);
begin
  if parent is CHouseTaskVzep then
    V := @(CHouseTaskVzep(parent).inBufferADR)
  else V := nil;
end;

function CMeterTaskVzep.run:Integer;
Var
    //connection : IConnection;
    //portpull   : CPortPull;
    index      : Integer;
    //pull       : CPortPull;
    i          : Integer;
    res        : boolean;
    getResult  : Integer;
    pDb        : CDBDynamicConn;
Begin
    index := 0;
    getResult := -1;
    try
    pDb  := meter.getDbConnect;
    getIntBuffer(meter.test_massiv);

    while meter.send(outMsg) do
    Begin
     if state=TASK_STATE_KIL then
     Begin
      if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep TASK KILLED!!!');
      exit;
     End;
     if(outMsg.m_swLen<>0) then
     Begin
      connection.put(outMsg);
      //if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep MSG PUT Complette. Len:'+IntToStr(outMsg.m_swLen));
      if EventBox<>Nil then EventBox.FixMessage(ET_NORMAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep MSG PUT Complette... MSG:>',outMsg);
      res := true;
      i   := 0;
      getResult := -1;
      while getResult<>0 do
      Begin
        getResult := connection.get(inMsg);
           if (meter is CEA8086Meter) and(getResult=0) and(inMsg.m_swLen=16) and (inMsg.m_sbyInfo[0]=$2b) and (inMsg.m_sbyInfo[1]=$2b) and (inMsg.m_sbyInfo[2]=$2b) then    //если пришел пакет обрыва соединения помечаем что обрыв
                   begin                                                                                                           // и перепрограммируем
                    getResult := 2;
                    result:=getResult;
                    exit;
                   end;
        //Normal get
        if getResult=0 then
        Begin
         //if EventBox<>Nil then EventBox.FixMessage(ET_RELEASE,'('+IntToStr(getId)+')CMeterTaskVzep MSG GET Complette. MSG:>',inMsg);
         if EventBox<>Nil then EventBox.FixMessage(ET_NORMAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep MSG GET Complette... MSG:>',inMsg);

         meter.m_nT.B2 := True; // Вторичный признак успешности опроса
         if meter.EventHandler(inMsg) then
         Begin
             if meter is CEA8086Meter then
              begin
               with meter.m_nP do
                 if (meter.State_8086=1) then
                  begin
                  pDb.setQueryState(M_SWABOID,m_swMID,QUERY_STATE_ER);
                  meter.State_8086:=0;
                  end
                 else
                  pDb.setQueryState(M_SWABOID,m_swMID,QUERY_STATE_OK);
               if EventBox<>Nil then EventBox.FixEvents(ET_RELEASE,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep MSG GET Complette. Len:'+IntToStr(inMsg.m_swLen));
               break;
              end
             else
              begin
               if meter.m_nT.B2 then begin
               //with meter.m_nP do pDb.setKvarQueryQroup(M_SWABOID,m_sddPHAddres);
               with meter.m_nP do pDb.setQueryState(M_SWABOID,m_swMID,QUERY_STATE_OK);
               if EventBox<>Nil then EventBox.FixEvents(ET_RELEASE,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep MSG GET Complette. Len:'+IntToStr(inMsg.m_swLen));
               end
               else begin
                 with meter.m_nP do pDb.setQueryState(M_SWABOID, m_swMID, QUERY_STATE_ER);
               end;
               break;
              end;
         End else
         Begin
          //pDb.setDescQueryQroup(meter.m_nP.M_SWABOID,meter.m_nP.m_schName,'Кадр отброшен!',TASK_QUERY);
          getResult := -1;
          //if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep Error In GET!!!. Len:'+IntToStr(inMsg.m_swLen));
         End;
        End;
        //Connect Error
        if getResult=2 then
        Begin
          //with meter.m_nP do pDb.setKvarQueryQroup(M_SWABOID,m_sddPHAddres);
          with meter.m_nP do
          begin
          pDb.setQueryState(M_SWABOID,m_swMID,QUERY_STATE_ER);
          pDb.addErrorArch(M_SWABOID,m_swMID);
          end;
         if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep MSG Skip. Error In Channel!!! ');
         break;
        End;
        inc(i);
        if i>meter.m_nP.m_sbyRepMsg then
        Begin
         //with meter.m_nP do pDb.setKvarQueryQroup(M_SWABOID,m_sddPHAddres);
         with meter.m_nP do
         begin
         pDb.setQueryState(M_SWABOID,m_swMID,QUERY_STATE_ER);
         pDb.addErrorArch(M_SWABOID,m_swMID);
         end;
         getResult := -1;
         break;
        End;        //Repeat message if not get
        connection.put(outMsg);
        if EventBox<>Nil then EventBox.FixMessage(ET_CRITICAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep.Run Repeat '+IntToStr(i)+' of '+IntToStr(meter.m_nP.m_sbyRepMsg)+'    MSG:>',outMsg);
        //sleep(meter.m_nP.m_swRepTime*1000);
        //if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep.Run Repeat '+IntToStr(i)+' of '+IntToStr(meter.m_nP.m_sbyRepMsg)+':> ');
      End;
      //if EventBox<>Nil then EventBox.FixMessage(ET_RELEASE,'('+IntToStr(getId)+')CMeterTaskVzep MSG GET:> ',outMsg);
     End else
     Begin
      index := index + 1;
      //if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep MSG PUT Complette.');
     End;
    End; 
    //pDb.setDtEndInQueryQroup(meter.m_nP.M_SWABOID,Now,TASK_QUERY_COMPL);
    //connection.iclose;
    //pDb.Disconnect;
    //if EventBox<>Nil then EventBox.FixEvents(ET_RELEASE,'('+IntToStr(getId)+')CMeterTaskVzep STOP. '+IntToStr(index)+' msg. ');
    //except
    finally
     //connection.iclose;
     //m_pDB.DiscDynConnect(pDb);
     Result := getResult;
     //if EventBox<>Nil then EventBox.FixEvents(ET_RELEASE,'('+IntToStr(meter.m_nP.M_SWABOID)+'к.'+meter.m_nP.m_sddPHAddres+')CMeterTaskVzep ERROR!!!. '+IntToStr(index)+' msg. ');
    end;
End;

function CMeterTaskVzep.getOutMsg:Integer;
begin
  Result := -1;
  FillChar(outMsg, SizeOf(outMsg), 0);
  if not meter.send(outMsg) then Exit;
  Result := 0;
end;


constructor CHouseTaskVzep.Create(vDtBegin,vDtEnd:TDateTime;
                              vCmd:Integer;
                              vGid :Integer;
                              vAid :Integer;
                              vMid :Integer;
                              vIsFind : Integer;
                              vErrorPercent : double;
                              vPortPull:TThreadList;
                              vTaskIndex:Integer;
                              var vMeterPull:CThreadPull;
                              var vParent : IRunnable);
Begin
      dtBegin      := vDtBegin;
      dtEnd        := vDtEnd;
      cmd          := vCmd;
      gid          := vGid;
      aid          := vAid;
      mid          := vMid;
      isFind       := vIsFind;
      portPull     := vPortPull;
      meterPull    := vMeterPull;
      id           := aid;
      state        := TASK_STATE_RUN;
      parent       := vParent;
      ErrorPercent := vErrorPercent;
End;
destructor CHouseTaskVzep.Destroy;
Begin
    inherited;
End;
function CHouseTaskVzep.getAboID:integer;
Begin
    Result := aid;
End;
function CHouseTaskVzep.getParamID:integer;
Begin
    Result := cmd;
End;
function CHouseTaskVzep.run:Integer;
Var
    i        : Integer;
    pump     : CDataPump;
    pMT      : PCMeter;
    pTbl     : SQWERYMDL;
    meter    : CMeter;
    index    : Integer;
    runnble  : IRunnable;
    mettask  : CMeterTaskVzep;
    pDb      : CDBDynamicConn;
    pDM      : CDBDynamicConn;
    pHF      : CHolesFinder;
    pTable   : SL2TAG;
    data     : TThreadList;
    vList    : TList;
    pD       : CJoinL2;
    pull     : CPortPull;
    res,reg      : Integer;
    connection : IConnection;
    findData : Boolean;
    dateEnd,dateBegin  : TDateTime;
Begin
    try
    reg:=0;
    findData := False;
    res      := 0;
    runnble  := nil;
    if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask Begin...');
    data := TThreadList.Create;
    pDb  := m_pDB.getConnection;
    pDb.GetAbonL2Join(gid,aid,data);
      if (cmd=QRY_LOAD_ALL_PARAMS) then
      begin
       if EventBox<>Nil then
         EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask ParemetChek false and Writing of reading parameters.');
      data.LockList.Count:=1;
      end;
    if ((isFind=0)and(mid=-1)) then pDb.DelArchData(dtEnd,dtBegin,aid,cmd);
    //if isFind=0 then
    pDb.setQueryState(aid,mid,QUERY_STATE_NO);
    vList := data.LockList;
    //pDb.setDtBeginEndInQueryQroup(aid,now,0,TASK_QUERY);

    dateEnd:=now;
    if (cmd=QRY_LOAD_ALL_PARAMS) then
      pDb.setDtBeginEndInQueryQroup(aid,now,dateEnd,TASK_QUERY_WAIT_PROG)
      else
      begin
      sleep(vList.count*1000);
      pDb.setDtBeginEndInQueryQroup(aid,now,dateEnd,TASK_QUERY_WAIT);
    end;


    if (vList.count>0) then
    Begin
     pD := vList[0];
     pull := getPortPull(pD.m_swPullID);
     if pull=nil then exit;
     connection := pull.getConnection;
     connection.clearHistory;
    End;
    if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask Device Received.');

    //for i:=0 to vList.count-1 do
    while i<vList.count do
     Begin
      try
      if (state=TASK_STATE_KIL) or (parent.getTaskState=TASK_STATE_KIL)   then
      Begin
       if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(aid)+')CHouseTask TASK KILLED!!!');
       pDb.setDtEndInQueryQroup(aid,now,TASK_HAND_STOP);
       exit;
      End;
      pD := vList[i];
      pTbl.m_snAID  := aid;
      pTbl.m_snVMID := pD.m_swVMID;
      pTbl.m_snMID  := pD.m_swMID;
      if(mid<>-1) then
      Begin
       if (mid<>pD.m_swMID) then continue;
      End;
      pDM := m_pDB.getConnection;
      meter := getL2Instance(pDM,pTbl.m_snMID);
      if cmdToCls(cmd)=CLS_MGN then
      meter.PObserver.LoadParamQS(cmd) else
      Begin
       pHF  := CHolesFinder.Create(pDb);
       pump := CDataPump.Create(nil,pHF,meter,@pTbl,cmd);
       if isFind=1 then findData := pump.PrepareFind(dtBegin,dtEnd,pTbl.m_snVMID,cmdToCls(cmd));
       pump.SetPump(dtBegin,dtEnd,pTbl.m_snMID,cmdToCls(cmd),0);
       pump.Start;
       while(pump.Next) do;
      End;
       if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask QUERY meter №:'+IntToStr(meter.m_nP.m_swMID)+' kv №:'+meter.m_nP.m_sddPHAddres);
       if ((isFind=1) and (findData=false)) then with meter.m_nP do pDb.setQueryState(aid,m_swMID,QUERY_STATE_OK);
       if (isFind=0) or ((isFind=1) and (findData=true)) then
       Begin

        if isManyErrors(pDb,aid,ErrorPercent) then
        Begin
         pDb.setDtEndInQueryQroup(aid,now,TASK_MANY_ERR);
         if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+'/'+meter.m_nP.m_sddPHAddres+')CHouseTask SKIP Query Connection=ERR:>Many Errors In House!!!');
         exit
        End;
          if (i=0) then
           pDb.setDtBeginEndInQueryQroup(aid,now,now,CALL_STATE);//Состояние вызова


        connection.iconnect(meter.m_nP.m_sPhone);
        if connection.getConnectionState=PULL_STATE_ERR then
        Begin
         pDb.setDtEndInQueryQroup(aid,now,TASK_CONN_ERR);
         if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+'/'+meter.m_nP.m_sddPHAddres+')CHouseTask SKIP Query Connection=ERR:>');
         exit
        End;
        if (connection.getConnectionState=PULL_STATE_CONN) and (cmd=QRY_LOAD_ALL_PARAMS) then
           begin
           dateBegin:=now;
           pDb.setDtBeginEndInQueryQroup(aid,dateBegin,0,TASK_QUERY_PROG);//НАЧАЛО ПРОГРАММИРОВАНИЯ
           end
        else if (i=0) and (connection.getConnectionState=PULL_STATE_CONN) then
           begin
           dateBegin:=now;
           pDb.setDtBeginEndInQueryQroup(aid,dateBegin,0,TASK_QUERY);//НАЧАЛО ОПРОСА
           end
           else pDb.setDtBeginEndInQueryQroup(aid,dateBegin,now,TASK_QUERY);//НАЧАЛО ОПРОСА
       // runnble := CMeterTaskVzep.Create(meter,IRunnable(self),connection);
           mettask := CMeterTaskVzep.Create(meter,IRunnable(self),connection);
        // mettask := runnble;
          if (i=0) then
             begin
               mettask.getIntBufferADR(meter.test_massiv_ADR);
               pDb.setADR(aid,meter.test_massiv_ADR);
               res := mettask.run();
                 if (res=2) then
                    begin
                      if (cmd=QRY_LOAD_ALL_PARAMS) then
                        begin
                        if (reg<=2)then
                        begin
                          inc(reg);
                          mettask.meter.PObserver.ClearGraphQry;
                          pDb.setQueryState(aid,-1,QUERY_STATE_NO);//помечает как не опрашивался
                          pDb.setDtBeginEndInQueryQroup(aid,now,now,TASK_QUERY_PROG);
                          continue;
                        end
                        else break;  
                        end
                      else continue;
                    end;
             end
           else
             begin
               mettask.getIntBufferADR(meter.test_massiv_ADR);
               res := mettask.run();
                 if (res=2) then
                  continue;
             end;

        //res := res;
        inc(i);
       End;
      except
       pDb.setQueryState(aid,meter.m_nP.m_swMID,QUERY_STATE_ER);
       pDb.addErrorArch(aid,meter.m_nP.m_swMID);
       if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(aid)+')CHouseTaskVzep Error in meter №:'+IntToStr(meter.m_nP.m_swMID)+' kv №:'+meter.m_nP.m_sddPHAddres);
      end;


       m_pDB.DiscDynconnect(pDM);
      // if runnble<>nil then runnble.Destroy;
       if mettask<>nil then mettask.Destroy;
       if pHF<>nil then pHF.Destroy;
       if pump<>nil then pump.Destroy;
       if meter<>nil then meter.Destroy;
       pD.Destroy;
     End;




     if res<>2 then
     begin
      if (cmd=QRY_LOAD_ALL_PARAMS) then   pDb.setDtEndInQueryQroup(aid,now,TASK_QUERY_PROG_COMPL){конец программирования}
      else
         pDb.setDtEndInQueryQroup(aid,now,TASK_QUERY_COMPL);    //КОНЕЦ ОПРОСА
     end    
      else pDb.setDtEndInQueryQroup(aid,now,TASK_CONN_ERR);

     finally
     if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTaskVzep End.');
     data.UnLockList;
     data.Destroy;
     m_pDB.DiscDynConnect(pDb);
     if (connection<>nil) then  connection.iclose;
    end;
End;




{
Var
    i        : Integer;
    pump     : CDataPump;
    pMT      : PCMeter;
    pTbl     : SQWERYMDL;
    meter    : CMeter;
    index    : Integer;
    runnble  : IRunnable;
    pDb      : CDBDynamicConn;
    pDM      : CDBDynamicConn;
    pHF      : CHolesFinder;
    pTable   : SL2TAG;
    data     : TThreadList;
    vList    : TList;
    pD       : CJoinL2;
    pull     : CPortPull;
    res      : Integer;
    connection : IConnection;
    findData : Boolean;
Begin
    try
    findData := False;
    res      := 0;
    runnble  := nil;
    if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask Begin...');
    data := TThreadList.Create;
    pDb  := m_pDB.getConnection;
    pDb.GetAbonL2Join(gid,aid,data);
      if (cmd=QRY_LOAD_ALL_PARAMS) then
      begin
       if EventBox<>Nil then
         EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask ParemetChek false and Writing of reading parameters.');
      data.LockList.Count:=1;
      end;
    if ((isFind=0)and(mid=-1)) then pDb.DelArchData(dtEnd,dtBegin,aid,cmd);
    //if isFind=0 then
    pDb.setQueryState(aid,mid,QUERY_STATE_NO);
    vList := data.LockList;
    pDb.setDtBeginEndInQueryQroup(aid,now,0,TASK_QUERY);
    if (vList.count>0) then
    Begin
     pD := vList[0];
     pull := getPortPull(pD.m_swPullID);
     if pull=nil then exit;
     connection := pull.getConnection;
     connection.clearHistory;
    End;
    if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask Device Received.');

    for i:=0 to vList.count-1 do
     Begin
      try
      if (state=TASK_STATE_KIL) or (parent.state=TASK_STATE_KIL)   then
      Begin
       if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(aid)+')CHouseTask TASK KILLED!!!');
       pDb.setDtEndInQueryQroup(aid,now,TASK_HAND_STOP);
       exit;
      End;
      pD := vList[i];
      pTbl.m_snAID  := aid;
      pTbl.m_snVMID := pD.m_swVMID;
      pTbl.m_snMID  := pD.m_swMID;
      if(mid<>-1) then
      Begin
       if (mid<>pD.m_swMID) then continue;
      End;
      pDM := m_pDB.getConnection;
      meter := getL2Instance(pDM,pTbl.m_snMID);
      if cmdToCls(cmd)=CLS_MGN then
      meter.PObserver.LoadParamQS(cmd) else
      Begin
       pHF  := CHolesFinder.Create(pDb);
       pump := CDataPump.Create(nil,pHF,meter,@pTbl,cmd);
       if isFind=1 then findData := pump.PrepareFind(dtBegin,dtEnd,pTbl.m_snVMID,cmdToCls(cmd));
       pump.SetPump(dtBegin,dtEnd,pTbl.m_snMID,cmdToCls(cmd),0);
       pump.Start;
       while(pump.Next) do;
      End;
       if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask QUERY meter №:'+IntToStr(meter.m_nP.m_swMID)+' kv №:'+meter.m_nP.m_sddPHAddres);
       if ((isFind=1) and (findData=false)) then with meter.m_nP do pDb.setQueryState(aid,m_swMID,QUERY_STATE_OK);
       if (isFind=0) or ((isFind=1) and (findData=true)) then
       Begin

        if isManyErrors(pDb,aid,ErrorPercent) then
        Begin
         pDb.setDtEndInQueryQroup(aid,now,TASK_MANY_ERR);
         if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+'/'+meter.m_nP.m_sddPHAddres+')CHouseTask SKIP Query Connection=ERR:>Many Errors In House!!!');
         exit
        End;

        connection.iconnect(meter.m_nP.m_sPhone);
        if connection.getConnectionState=PULL_STATE_ERR then
        Begin
         pDb.setDtEndInQueryQroup(aid,now,TASK_CONN_ERR);
         if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+'/'+meter.m_nP.m_sddPHAddres+')CHouseTask SKIP Query Connection=ERR:>');
         exit
        End;
        runnble := CMeterTask.Create(meter,IRunnable(self),connection);
        res := runnble.run;
        //res:=0;
       End;
      except
       pDb.setQueryState(aid,meter.m_nP.m_swMID,QUERY_STATE_ER);
       pDb.addErrorArch(aid,meter.m_nP.m_swMID);
       if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(aid)+')CHouseTask Error in meter №:'+IntToStr(meter.m_nP.m_swMID)+' kv №:'+meter.m_nP.m_sddPHAddres);
      end;
       m_pDB.DiscDynconnect(pDM);
       if runnble<>nil then runnble.Destroy;
       if pHF<>nil then pHF.Destroy;
       if pump<>nil then pump.Destroy;
       if meter<>nil then meter.Destroy;
       pD.Destroy;
     End;
     if res<>2 then pDb.setDtEndInQueryQroup(aid,now,TASK_QUERY_COMPL) else pDb.setDtEndInQueryQroup(aid,now,TASK_CONN_ERR);
    finally
     if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask End.');
     data.UnLockList;
     data.Destroy;
     m_pDB.DiscDynConnect(pDb);
     if (connection<>nil) then connection.iclose;
    end;
End;


}




function CHouseTaskVzep.isManyErrors(pDb:CDBDynamicConn;aid:Integer;vErrorPercent:double):boolean;
Var
    data : QGABONS;
    quality : double;
Begin
    data := QGABONS.Create;
    data.ALLCOUNTER := 1000;
    data.ISOK := 0;
    data.ISER := 0;
    pDb.GetQueryAbonsError(aid,data);
    quality := 100*data.ISER/data.ALLCOUNTER;
    if quality>vErrorPercent then
    Begin
     Result := true;
     data.Destroy;
     exit;
    End;
    data.Destroy;
    Result := false;
End;

function CHouseTaskVzep.getPortPull(plid:Integer):CPortPull;
Var
    vList : TList;
    i     : Integer;
    pD    : CPortPull;
begin
    Result := nil;
    vList := portpull.LockList;
    try
    for i:=0 to vList.Count-1 do
    Begin
     pD := vList[i];
     if pD.getPullID=plid then
     Begin
      Result := pD;
      exit;
     End;
    End;
    finally
     portPull.UnLockList;
    end;
end;

function CHouseTaskVzep.getL2Instance(dynConnect:CDBDynamicConn;mid:Integer):CMeter;
Var
    meter  : CMeter;
    pTable : SL2TAG;
Begin
    if (dynConnect.GetMMeterTableEx(mid,pTable)) then
    Begin
   // if (pTable.m_sbyProtID = DEV_BTI_SRV)   then meter := CBTIMeter.Create else
    //if (pTable.m_sbyProtID = DEV_K2000B_CLI)then meter := CK2KBytMeter.Create else
    case pTable.m_sbyType of

       MET_EA8086        : meter := CEA8086Meter.Create;
     
      End;
      End;
      if meter<>nil then
      Begin
       //if m_nCF.QueryType<>QWR_QWERY_SRV then meter.BOX_L3_BY := BOX_L3 else
      // if m_nCF.QueryType= QWR_QWERY_SRV then meter.BOX_L3_BY := BOX_CSRV;
       meter.setDbConnect(dynConnect);
       meter.Init(pTable);
      End;
      Result := meter;
End;

function CHouseTaskVzep.cmdToCls(cmd:Integer):Integer;
Begin
     if(((cmd>=QRY_ENERGY_SUM_EP) and (cmd<=QRY_ENERGY_SUM_EP)) or
        (cmd=QRY_DATA_TIME) or
        (cmd=QRY_LOAD_ALL_PARAMS) or
        ((cmd=QRY_ENTER_COM)or(cmd=QRY_EXIT_COM)) or
        ((cmd>=QRY_MGAKT_POW_S) and (cmd<=QRY_FREQ_NET))) then
     Begin
      Result := CLS_MGN;
      exit;
     End else
     if(((cmd>=QRY_ENERGY_DAY_EP) and (cmd<=QRY_ENERGY_DAY_RM)) or
        ((cmd>=QRY_NAK_EN_DAY_EP) and (cmd<=QRY_NAK_EN_DAY_RM))) then
     Begin
      Result := CLS_DAY;
      exit;
     End else
     if(((cmd>=QRY_ENERGY_MON_EP) and (cmd<=QRY_ENERGY_MON_RM)) or
        ((cmd>=QRY_NAK_EN_MONTH_EP) and (cmd<=QRY_NAK_EN_MONTH_RM))) then
     Begin
      Result := CLS_MONT;
      exit;
     End else
     if((cmd>=QRY_SRES_ENR_EP) and (cmd<=QRY_SRES_ENR_RM)) then
     Begin
      Result := CLS_GRAPH48;
      exit;
     End else
     if(cmd=QRY_DATA_TIME) then
     Begin
      Result := CLS_TIME;
      exit;
     End else
     if((cmd>=QRY_JRNL_T1) and (cmd<=QRY_JRNL_T4)) then
     Begin
      Result := CLS_EVNT;
      exit;
     End
End;

end.
