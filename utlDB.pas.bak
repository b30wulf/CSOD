unit utlDB;

interface
uses
  Windows,forms, Classes, SysUtils, SyncObjs, StdCtrls, ComCtrls, Db, Dates,
  utltypes, utlconst, utlbox, INIfiles, IBDatabase,IBQuery;
type
    TDBase = class
    private
     m_strProvider   : String;
     m_strFileName   : String;
     m_blIsConnect   : Boolean;
    public
     IBTr            : TIBTransaction;
     IBConnection    : TIBDatabase;
     IBQuery         : TIBQuery;     
     constructor Create(m_strProvider : string); overload;
     procedure Init(strFileName:String);
     function  Connect:Boolean;
     function  Disconnect:Boolean;
     procedure CreateConnection(var vConn:TIBDatabase;var vQry:TIBQuery);
     procedure DestroyConnection(var vConn:TIBDataBase;var vQry:TIBQuery);
     procedure DestroyConnectionQuery(vQry:TIBQuery);
     function  ExecQry(strSQL:String):Boolean;
     function  OpenQry(strSQL:String;var nCount:Integer):Boolean;
     function  OpenQrySL(SL:TStringList;var nCount:Integer):Boolean;
     function  ExecQrySL(strSQL:TStringList):Boolean;
     procedure CloseQry;
    End;

 var DBase : TDBase;
     strSettingsPath : string;

implementation

const
    MAX_BLOCK_QRY = 50;

constructor TDBase.Create(m_strProvider : string);
begin
  Self.Init(m_strProvider);
  Self.Connect;
end;

procedure TDBase.Init(strFileName:String);
var Fl   : TINIFile;
Begin
//  m_strFileName := strFileName;
  m_strProvider := strFileName;
  m_blIsConnect := False;
  Fl := TINIFile.Create(strFileName);
  m_strProvider := Fl.ReadString('DBCONFIG', 'DBProvider', '');
  FreeAndNil(Fl);
End;

function TDBase.Connect:Boolean;
Begin
  Result := True;
  m_blIsConnect := True;
  try
   CreateConnection(IBConnection,IBQuery);
  except
  end;
End;

function TDBase.Disconnect:Boolean;
Begin
   Result := True;
  m_blIsConnect := False;
  try
   DestroyConnection(IBConnection,IBQuery);
  except
  end;
End;

procedure TDBase.CreateConnection(var vConn:TIBDataBase;var vQry:TIBQuery);
Begin
  if vConn=Nil then
  Begin
    vConn := TIBDataBase.Create(nil);
    IBTr := TIBTransaction.Create(nil);
    with vConn do begin
     SQLDialect := 3;
     DatabaseName := m_strProvider;
     Params.Add('user_name=sysdba');
     Params.Add('password=masterkey');
     Params.Add('lc_ctype=WIN1251');
     LoginPrompt := False;
     DefaultTransaction := IBTr;
    end;
    vConn.Connected := True;
    if vQry=Nil then
    Begin
     vQry := TIBQuery.Create(Nil);
     vQry.Transaction:=IBTr;
     vQry.Database:=vConn;
    End;
  End;
End;

procedure TDBase.DestroyConnection(var vConn:TIBDataBase;var vQry:TIBQuery);
Begin
  if vConn<>Nil then
  Begin
   FreeAndNil(vConn);
   if vQry<>Nil then
   Begin
    FreeAndNil(vQry);
   End;
   if IBTr<>Nil then
   Begin
    FreeAndNil(IBTr);
   End;
  End;
End;

procedure TDBase.DestroyConnectionQuery(vQry:TIBQuery);
Begin
  if vQry<>Nil then
  Begin
   FreeAndNil(vQry);
  End;
End;

function TDBase.ExecQry(strSQL:String):Boolean;
Begin
  Result := false;
  if m_blIsBackUp=True then exit;
  Result := True;
  try
   //IBQuery.Transaction.StartTransaction;
   IBQuery.Close;
   IBQuery.SQL.Clear;
   IBQuery.SQL.Add(strSQL);
   IBQuery.ExecSQL;
   IBQuery.SQL.Clear;
   IBQuery.Close;
  //IBQuery.Transaction.CommitRetaining;
  except
    //IBQuery.Transaction.Rollback;
   Result := False;
  end;
End;

function TDBase.OpenQry(strSQL:String;var nCount:Integer):Boolean;
Begin
  Result    := False;
  if m_blIsBackUp=True then exit;
  nCount := 0;
  if m_blIsConnect=False then Begin Result := False;exit;End;
  Result := True;
  try
   //IBQuery.Transaction.StartTransaction;
   IBQuery.SQL.Clear;
   IBQuery.SQL.Add(strSQL);
   IBQuery.Open;
   IBQuery.FetchAll;
   //IBQuery.Transaction.Commit;
   if IBQuery.RecordCount >= 0 then  Begin nCount := IBQuery.RecordCount; Result := True;End;
  except
   //IBQuery.Transaction.Rollback;
   Result := False;
  end;
End;


function  TDBase.OpenQrySL(SL:TStringList;var nCount:Integer):Boolean;
Begin
  Result := False;
  if m_blIsBackUp=True then exit;
  nCount := 0;
  if m_blIsConnect=False then Begin Result := False; exit; End;
  Result := True;
  try
   //IBQuery.Transaction.StartTransaction;
   IBQuery.SQL.Clear;
   IBQuery.SQL := SL;
   IBQuery.Open;
   IBQuery.FetchAll;
   //IBQuery.Transaction.Commit;
   if IBQuery.RecordCount >= 0 then  Begin nCount := IBQuery.RecordCount; Result := True;End;
  except
   //IBQuery.Transaction.Rollback;
   Result := False;
  end;
end;


procedure TDBase.CloseQry;
Begin
  if m_blIsConnect=False then exit;
  if m_blIsBackUp=True then exit;
  IBQuery.SQL.Clear;
  IBQuery.Close;
End;

function TDBase.ExecQrySL(strSQL:TStringList):Boolean;
Begin
  Result := false;
  if m_blIsBackUp=True then exit;
  Result := True;
  try
   //IBQuery.Transaction.StartTransaction;
   IBQuery.Close;
   IBQuery.SQL.Clear;
   IBQuery.SQL:=strSQL;
   IBQuery.ExecSQL;
   IBQuery.SQL.Clear;
   IBQuery.Close;
  //IBQuery.Transaction.CommitRetaining;
  except
    //IBQuery.Transaction.Rollback;
   Result := False;
  end;
End;


initialization
  strSettingsPath := ExtractFilePath(Application.ExeName) + 'Settings\USPD_Config.ini';
  DBase := TDBase.Create(strSettingsPath);
  DBase.Connect;

finalization
  DBase.Disconnect;
  DBase.Destroy;

end.

