<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<link href="style.css" type="text/css" rel=stylesheet>
<title>Совет 5</title>
</head>
<body lang=RU link=blue vlink=purple class="Normal" bgcolor="#FFFFFF">
<h2><a name="top">Совет 5</a>. Предпочитайте интерфейс сокетов интерфейсу XTI/TLI</h2>
<hr><div align="right"><a href="adv5.htm#p1">Вниз</a> | <a href="index.htm">Содержание</a> | <a href="adv4.htm">Назад</a> | <a href="adv6.htm">Далее</a></div>
<p style='text-align:justify;'>В мире UNIX в качестве интерфейса к коммуникационным 
  протоколам, в частности к TCP/IP, в основном используются следующие два API:</p>
<ul type=disc>
  <li style='text-align:justify;     '>шкеты Беркли;</li>
  <li style='text-align:justify;     '>транспортный интерфейс XTI(X/Open Transport 
    Interface).</li>
</ul>
<p style='text-align:justify;'>Интерфейс сокетов разработан в Университете г. 
  Беркли штата Калифорния и вошел в состав созданной там же версии операционной 
  системы UNIX. Он получил широкое распространение вместе с версией 4.2BSD (1983), 
  затем был усовершенствован в версии 4.3BSD Reno (1990) и теперь включается практически 
  во все версии UNIX. API сокетов присутствует и в других операционных системах. 
  Так, Winsock API популярной в мире Microsoft Windows основан на сокетах из BSD 
  [Winsock Group 1997].</p>
<p style='text-align:justify;'>API интерфейса XTI - это расширение интерфейса 
  к транспортному уровню (Transport Layer Interface - TLI), который впервые появился 
  в системе UNIX System V Release 3.0 (SVR3) компании AT&amp;T. TLI задумывался 
  как интерфейс, не зависящий, от протокола, так как он сравнительно легко поддерживает 
  новые протоколы, На его дизайн оказала значительное влияние модель протоколов 
  OSI (совет 14). В то время многие полагали, что эти протоколы вскоре придут 
  на смену TCP/IP И поэтому, с точки зрения программиста TCP/IP, дизайн этого 
  интерфейса далек от оптимального. Кроме того, хотя имена функций TLI очень похожи 
  на используемые в API сокетов (только они начинаются с t_), их семантика в ряде 
  случаев кардинально отличается.</p>
<p style='text-align:justify;'>Тот факт, что интерфейс TLI все еще популярен, 
  возможно, объясняется en использованием с протоколами Internetwork Packet Exchange/Sequenced 
  Packe Exchange (IPX/SPX) в системах фирмы Novell. Поэтому при переносе программ 
  написанных для IPX/SPX, под TCP/IP проще было воспользоваться тем же интерфейсом 
  TLI [Kacker 1999].</p>
<p style='text-align:justify;'>В четвертой части первого тома книги «UNIX Network 
  Programming» [Stevens 1998] имеется прекрасное введение в программирование XTI 
  и подсистем STREAMS. Представить, насколько отличается семантика XTI и сокетов, 
  можно хотя бы по тому, что обсуждению XTI посвящено более 100 страниц.</p>
<p style='text-align:justify;'>Надеясь, что протоколы OSI все-таки заменят TCP/IP, 
  многие производители UNIX-систем рекомендовали писать новые приложения с использованием 
  ТМ API. Одна фирма-производитель даже заявила, что интерфейс сокетов не будет 
  поддерживаться в следующих версиях. Но такие прогнозы оказались несколько преждевременными.</p>
<p style='text-align:justify;'>Протоколы OSI можно считать устаревшими, но TLI 
  и последовавший за ним XTI все еще поставляются в составе UNIX-систем, производных 
  от System V. Поэтому при программировании для UNIX встает вопрос: что лучше 
  использовать&nbsp;- сокеты или XTI?</p>
<p style='text-align:justify;'>Здесь необходимо напомнить, почему указанные протоколы 
  называются интерфейсами. Для программиста TCP/IP это всего лишь разные способы 
  доступа к стеку TCP/IP. Поскольку именно этот стек реализует коммуникационные 
  протоколы, не имеет значения, какой API использует его клиент. Это означает, 
  что приложение, написанное с помощью сокетов, может обмениваться данными с приложением 
  на базе XTI. В системах типа SVR4 оба интерфейса обычно реализуются в виде библиотек, 
  осуществляющих доступ к стеку TCP/IP с помощью подсистемы STREAMS.</p>
<p style='text-align:justify;'>Рассмотрим сначала интерфейс XTI. У него есть своя 
  ниша в сетевом программировании. Поскольку он не зависит от протокола, с его 
  помощью можно добавить в систему UNIX новый протокол, не имея доступа к коду 
  ядра. Проектировщику протокола необходимо лишь реализовать транспортный провайдер 
  в виде STREAMS-мультиплексора, связать его с ядром, а потом обращаться к нему 
  через XTI.</p>
<p style='text-align:justify;'><i>Примечание:</i> О том, как писать модули STREAMS, 
  а также о программировании TLI и STREAMS вы можете прочесть в книге [Rago 199^</p>
<p style='text-align:justify;'>Обратите внимание, насколько специфична ситуация: 
  нужно реализовать отсутствующий в системе протокол, когда нет доступа к исходным 
  текстам ядра.</p>
<p style='text-align:justify;'><i>Примечание:</i> Кроме того, этот протокол нужно 
  разработать для сиcтемы SVR4 или любой другой, поддерживающей STREAMS и XTI/1 
  Начиная с версии Solaris 2.6, фирма Sun предоставляет такую же функциональность 
  с помощью API сокетов.</p>
<p style='text-align:justify;'>Иногда утверждают, что проще писать не зависящий 
  от протокола код с мощью XTI/TLI [Rago 1993]. Конечно, «простота» - понятие 
  субъективное, но в разделе 11.9 книги «UNIX Network Programming» Стивенс с помощью 
  сокетов реализовал простой, не зависящий от протокола сервер времени дня, который 
  поддерживает IP версии 4, IP версии 6 и сокеты в адресном домене UNIX.</p>
<p style='text-align:justify;'>И, наконец, говорят, что при поддержке обоих интерфейсов 
  сокеты обычно реализуются поверх TLI/XTI, так что TLI/XTI более эффективен. 
  Это не так. Как отмечалось выше, в системах на базе SVR4 оба интерфейса обычно 
  реализованы в виде библиотек, напрямую общающихся с подсистемой STREAMS. Фактически 
  с версии Solaris 2.6 (Solaris - это версии SVR4, созданные фирмой Sun) сокеты 
  ре­ализованы непосредственно в ядре; обращение к ним происходит через вызовы 
  системы.</p>
<p style='text-align:justify;'>Большое преимущество сокетов - переносимость. Поскольку 
  сокеты есть практически во всех системах с XTI/TLI, их использование гарантирует 
  максимальную переносимость. Даже если ваше приложение будет работать только 
  под UNIX, так как большинство операционных систем, поддерживающих TCP/IP, предоставляет 
  интерфейс сокетов. И лишь немногие системы, не принадлежащие к UNIX, содержат 
  интерфейс XTI/TLI (если вообще такие существуют). Например, создание приложения, 
  переносимого между UNIX и Microsoft Windows, - сравнительно несложная задача, 
  так как Windows поддерживает спецификацию Winsock, в которой реализован API 
  сокетов.</p>
<p style='text-align:justify;'>Еще одно преимущество сокетов в том, что этот интерфейс 
  проще использовать, чем XTI/TLI. Поскольку XTI/TLI проектировался в основном 
  как общий интерфейс (имеются в виду протоколы OSI), программисту приходится 
  при его использовании писать больше кода, чем при работе с сокетами. Даже сторонники 
  XTI/TLI согласны с тем, что для создания приложений TCP/IP следует предпочесть 
  интерфейс сокетов.</p>
<p style='text-align:justify;'>Руководство «Введение в библиотеку подпрограмм», 
  поставляемое в составе Solaris 2.6, дает такой совет по выбору API: «При всех 
  обстоятельствах рекомендуется использовать API сокетов, а не XTI и TLI. Если 
  требуется переносимость на Другие системы, удовлетворяющие спецификации XPGV4v2, 
  то следует использовать интерфейсы из библиотеки libxnet. Если же переносимость 
  необязательна, то рекомендуется интерфейс сокетов из библиотек libsocket и libnsl, 
  а не из libxnet. Если выбирать между XTI и TLI, то лучше пользоваться интерфейсом 
  XTI (доступным через libxnet), а не TLI (доступным через libnsl)».</p>
<h3><a name="p1">Резюме</a></h3>
<p style='text-align:justify;'>В обычных ситуациях нет смысла использовать интерфейс 
  XTI/TLI при программировании TCP/IP. Интерфейс сокетов проще и обладает большей 
  переносимостью, а возможности обоих интерфейсов почти одинаковы.</p>
<hr><div align="right"><a href="adv5.htm#top">Вверх</a> | <a href="index.htm">Содержание</a> | <a href="adv4.htm">Назад</a> | <a href="adv6.htm">Далее</a></div>
</body>
</html>
