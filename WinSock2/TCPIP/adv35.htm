<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<link href="style.css" type="text/css" rel=stylesheet>
<title>Совет 35</title>
</head>
<body lang=RU link=blue vlink=purple class="Normal" bgcolor="#FFFFFF">
<h2><a name="top">Совет 35. Применяйте программу </a>traceroute</h2>
<hr><div align="right"><a href="adv35.htm#p3">Вниз</a> | <a href="index.htm">Содержание</a> | <a href="adv34.htm">Назад</a> | <a href="adv36.htm">Далее</a></div>
<p style='text-align:justify;'>Утилита traceroute - это важный инструмент для 
  нахождения ошибок маршрутизации, изучения трафика в Internet и исследования 
  топологии сети. Как и многие другие распространенные сетевые инструменты, traceroute 
  была разработана коллективом лаборатории Лоренса Беркли в Университете Калифорнии.</p>
<p style='text-align:justify;'><i>Примечание</i>: В комментариях к исходному тексту 
  Ван Джекобсон, автор программы traceroute, пишет: «Я пытался найти ошибку в 
  работе алгоритма маршрутизации в течение 48 бессонных часов, и этот код родился 
  как-то сам собой».</p>
<p style='text-align:justify;'>Идея traceroute проста. Программа пытается определить 
  маршрут между двумя хостами в сети, заставляя каждый промежуточный маршрутизатор 
  посылать ICMP-сообщение об ошибке хосту-отправителю. Далее об этом механизме 
  будет сказано подробнее. Сначала нужно несколько раз запустить программу и посмотреть, 
  что она выдает. Проследим маршрут между хостом bsd и компьютером в Университете 
  города Тампа на юге Флориды (рис. 4.7). Как обычно, перенесены строки, не умещающиеся 
  на странице.</p>
<p style='text-align:justify;'>Число слева в каждой строке - это номер промежуточного 
  узла. За ним идет имя хоста или маршрутизатора в этом узле и далее - IP-адрес 
  узла. Если узнать имя не удается, то traceroute печатает только IP-адрес. Такая 
  ситуация наблюдается в узле 13. Как видно, по умолчанию программа пыталась определить 
  имя хоста или маршрутизатора трижды, а три числа, следующие за IP-адресом, - 
  это Периоды кругового обращения (RTT) для каждой из трех попыток. Если при оче-РеДной 
  попытке на запрос никто не отвечает или ответ теряется, то вместо времена печатается 
  «*».</p>
<p style='text-align:justify;'>Хотя компьютер ziggy.usf.edu расположен в соседнем 
  городе, в Internet между ними находится 14 узлов. Сначала данные проходят через 
  два маршрутизатора, в Тампе, относящихся к сети net com. net (это сервис-провайдер, 
  через которого выходит в Internet), потом еще через два маршрутизатора, а затем 
  через маршрутизатор netcom.net в узле МАЕ-EAST (узел 5) в сеть, находящуюся 
  в Вашингтоне, округ Колумбия. Узел МАЕ-EAST - это точка пересечения сетей, в 
  которой сервис-провайдеры передают друг другу Internet-трафик. Далее покидает 
  узел МАЕ-EAST и попадает в сеть sprintlink.net. От маршрутизатора сети Sprintlink 
  в узле MAE-EAST он пролегает вдоль восточного побережья до домена usf.edu (узел 
  13). И наконец на шаге 14 маршрут подходит к компьютеру ziggy.</p>
<p>bsd: $ tracerout ziggy, usf. edu</p>
<p>traceroute to ziggy. usf. edu (131. 247. 1. 40), 30 hops max,</p>
<p>                     40 byte packets</p>
<p>  1 tam-f1-pm8. netcom. net (163. 179. 44. 15)</p>
<p>                     128. 960 ms 139. 230ms 129. 483 ms</p>
<p>  2 tam-f1-qwl. netcom. net (163. 179. 44. 254)</p>
<p>                     139. 436 ms 129.226ms 129.570 ms</p>
<p>  3 nl-0.mig-fl-qwl.Netcom.net (165.236.144.110)</p>
<p>                     279.582 ms 199.325 ms 289.611 ms</p>
<p>  4 a5-0-0-6.was-dc-qwl.Netcom.net (163.179.235.121)</p>
<p>                     179.505 ms 229.543 ms 179.422 ms</p>
<p>  5 h1-0.mae-east.netcom.net (163.179.220.182)</p>
<p>                     189.258 ms 179.211 ms 169.605 ms</p>
<p>  6 s1-mae-e-f0-0.sprintlink.net (192.41.177.241)</p>
<p>                     189.999 ms 179.399 ms 189.472 ms</p>
<p>  7 s1-bb4-dc-1-0-0.sprintlink.net (144.228.10.41)</p>
<p>                     180.048 ms 179.388 ms 179.562 ms</p>
<p>  8 s1-bb10-rly-2-3.sprintlink.net (144.232.7.153)</p>
<p>                     199.433 ms 179.390 ms 179.468 ms</p>
<p>  9 s1-bb11-rly-9-0.sprintlink.net (144.232.0.46)</p>
<p>                     199.259 ms 189.315 ms 179.459 ms</p>
<p> 10 s1-bb10-orl-1-0.sprintlink.net (144.232.9.62)</p>
<p>                     189.987 ms 199.508 ms 219.252 ms</p>
<p> 11 s1-qw3-orl-4-0-0.sprintlink.net (144.232.2.154)</p>
<p>                     219.307 ms 209.382 ms 209.502 ms</p>
<p> 12 s1-usf-1-0-0.sprintlink.net (144.232.154.14)</p>
<p>                     209.518 ms 199.288 ms 219.495 ms</p>
<p> 13 131.247.254.36 (131.247.254.36) 209.318ms 199.281ms 219.588ms</p>
<p> 14 ziggy.usf.edu (131.247.1.40) 209.591 ms * 210.159 ms</p>
<p align=center style='text-align:center;'>Рис. 4.7. Маршрут до хостаziggy.usf.edu, 
  прослеженный traceroute</p>
<p style='text-align:justify;'>Посмотрим, как далеко от bsd отстоит Калифорнийский 
  университет в Лос-Анджелесе. Понятно, что географически он находится на другом 
  конце страны, в Калифорнии. А если выполнить traceroute до хоста panther в Калифорнийском 
  университете, то получится результат, показанный на рис. 4.8.</p>
<p style='text-align:justify;'>На этот раз маршрут проходит только через 13 промежуточных 
  узлов и достигает домена ucla. edu на шаге 11. Таким образом, топологически 
  bsd ближе к Калифорнийскому университету, чем к Университету на юге Флориды.</p>
<p style='text-align:justify;'><i>Примечание:</i> Университет Чепмена, расположенный 
  также вблизи Лос-Анджелеса, находится всего в девяти промежуточных шагах от 
  bsd. Это связано с тем, что домен chapman, edu, как и bsd, подключен к Internet 
  через сеть netcom.net, и весь трафик проходи по этой опорной сети.</p>
<h3><a name="p1">Как работает </a>traceroute</h3>
<p style='text-align:justify;'>А теперь разберемся, как работает traceroute. Вспомним 
  (совет 22), что в IP-датаграмме есть поле TTL, которое уменьшается на единицу 
  каждым промежуточным</p>
<p>bsd: $ traceroute panther.cs.ucla.edu</p>
<p>traceroute to panther.cs-ucla.edu (131.179.128.25),</p>
<p>                     30 hops max, 40 bytes packets</p>
<p>  1 tam-f1-pm8.netcom.net (163.179.44.15)</p>
<p>                     178.957 ms 129.049 ms 129.585 ms</p>
<p>  2 tam-f1-gw1.netcom.net (163.179.44.254)</p>
<p>                     1390435 ms 139.258 ms 139.434 ms</p>
<p>  3 h1-0.mig-f1-gw1.netcom.net (165.236.144.110)</p>
<p>                     139.538 ms 149.202 ms 139.488 ms</p>
<p>  4 a5-0-0-7.was-dc-gw1.netcom.net (163.179.235.121)</p>
<p>                     189.535 ms 179.496 ms 168.699 ms </p>
<p>  5 h2-0.mae-east.netcom.net (163.179.136.10)</p>
<p>                     180.040 ms 189.308 ms 169.479 ms</p>
<p>  6 cpe3-fddi-0.Washington.cw.net (192.41.177.180)</p>
<p>                     179.186 ms 179.368 ms 179.631 ms</p>
<p>  7 core5-hssi6-0-0.Washington.cw.net (204.70.1.21)</p>
<p>                     199.268 ms 179.537 ms 189.694 ms</p>
<p>  8 corerouter2.Bloomington.cw.net (204.70.9.148)</p>
<p>                     239.441 ms 239.560 ms 239.417 ms</p>
<p>  9 bordercore3.Bloomington.cw.net (166.48.180.1)</p>
<p>                     239.322 ms 239.348 ms 249.302 ms</p>
<p> 10 ucla-internet –t-3.Bloomington.cw.net (166.48.181.254)</p>
<p>                     249.989 ms 249.384 ms 249.662 ms</p>
<p> 11 cbn5-t3-1.cbn.ucla.edu (169.232.1.34)</p>
<p>                     258.756 ms 259.370 ms 249.487 ms</p>
<p> 12 131.179.9.6 (131.179.9.6) 249.457 ms 259.238 ms 249.666 ms</p>
<p> 13 Panther.CS.UCLA.EDU (131.179.128.25) 259.256 ms 259.184 ms*</p>
<p>bsd: $</p>
<p align=center style='text-align:center;'>Рис. 4.8. Маршрут до хоста panther.cs.ucla.edu, 
  прослеженный traceroute</p>
<p style='text-align:justify'>маршрутизатором. Когда маршрутизатор получает датаграмму, 
  у которой в поле TTL находится единица (или нуль), он отбрасывает ее и посылает 
  отправителю ICМР-сообщение «истекло время в пути».</p>
<p style='text-align:justify;'>Программа traceroute использует это свойство. Сначала 
  она посылает получателю UDP-датаграмму, в которой TTL установлено в единицу. 
  Когда датаграмма доходит до первого маршрутизатора, тот определяет, что поле 
  TTL равно единице, отбрасывает датаграмму и посылает отправителю ICМР-сообщение. 
  как вы узнаете адрес первого промежуточного узла (из поля «адрес отправителя» 
  в заголовке ICMP). И traceroute пытается выяснить его имя с помощью Функции 
  gethostbyaddr. Чтобы получить информацию о втором узле, traceroute Повторяет 
  процедуру, на этот раз установив TTL равным двум. Маршрутизатор в первом промежуточном 
  узле уменьшит TTL на единицу и отправит датаграмму Дальше. Но второй маршрутизатор 
  определит единицу в поле TTL, отбросит датаграмму и пошлет ICМР-сообщение отправителю. 
  Повторяя эти действия, но увеличивая каждый раз значение TTL, traceroute может 
  построить весь маршрут От отправителя к получателю.</p>
<p align=center style='text-align:center;'> <img width=480 height=240
src="./img/image045.gif" v:shapes="_x0000_i1025"> </p>
<p align=center style='text-align:center;'>Рис. 4.9. Маршрутизатор N ошибочно 
  переправляет датаграмму с TTL, равным нулю</p>
<p style='text-align:justify;'>Когда датаграмма с достаточно большим начальным 
  значением TTL наконец доходит до получателя, TTL будет равно единице, но, поскольку 
  дальше переправлять датаграмму некуда, стек TCP/IP попытается доставить ее ожидающему 
  приложению. Однако traceroute установлено в качестве порта назначения такое 
  значение, которое вряд ли кем-то используется, поэтому хост-получатель вернет 
  ICMP-сообщение «порт недоступен». Получив такое сообщение, tracerout определяет, 
  что конечный получатель обнаружен, и трассировку можно завершить.</p>
<p style='text-align:justify;'>Поскольку протокол UDP ненадежен (совет 1), не 
  исключена возможность потери датаграмм. Поэтому traceroute пытается «достучаться» 
  до каждого промежуточного хоста или маршрутизатора несколько раз, то есть посылает 
  несколько датаграмм с одним и тем же значением TTL. По умолчанию делается три 
  попытки, но это можно изменить с помощью опции -q.</p>
<p style='text-align:justify;'>Кроме того, tracerout нужно определить, сколько 
  времени ждать IСМР&nbsp;- сообщения после каждой попытки. По умолчанию время 
  ожидания - 5 с, но это значение можно изменить с помощью опции -w. Если в течение 
  этого времени IСМР-сообщение не получено, то вместо значения RTT печатается 
  звездочка (*).</p>
<p style='text-align:justify;'>В описанном процессе могут быть некоторые трудности: 
  traceroute полагается на то, что маршрутизаторы будут, как положено, отбрасывать 
  IP-датаграммы, в которых TTL равно единице, и посылать при этом ICMP-сообщение 
  «истекло время в пути». К сожалению, некоторые маршрутизаторы таких сообщений 
  не посылают, и тогда печатаются звездочки. Есть также маршрутизаторы, которые 
  посылают сообщение, но с тем значением TTL, которое обнаружили во входящей датаграмме. 
  Поскольку оно оказалось равным нулю, то датаграмма будет отброшена первым узлом 
  на обратном пути (если, конечно, это не случилось на первом шаге). Результате 
  точно такой же, как если бы ICMP-сообщение не посылалось вовсе.</p>
<p style='text-align:justify;'>Некоторые маршрутизаторы ошибочно переправляют 
  далее датаграммы, в которых TTL равно нулю. Если такое происходит, то следующий 
  маршрутизатор, например N + 1, отбросит датаграмму и вернет ICMP-сообщение «истекло 
  врем в пути». На дальнейшей итерации маршрутизатор N + 1 получит датаграмму 
  со значением TTL, равным единице, и вернет обычное ICMP-сообщение. Таким образом, 
  маршрутизатор N&nbsp;+&nbsp;1 появится дважды: первый раз в результате ошибки 
  предыдущего маршрутизатора, а второй - после корректного отбрасывания датаграммы 
  с истекшим временем работы. Такая ситуация изображена на рис. 4.9, а ее видимое 
  проявление&nbsp;- в строках, соответствующих узлам 5 и 6 на рис. 4.10.</p>
<p>bed: $ traceroute syrup.hill.com</p>
<p>traceroute to syrup.hil1.corn (208.162.106.3),</p>
<p class=MsoToc1>30 hops max, 40 byte packets</p>
<p>  1  tam-fl-pm5.netcom.net (163.179.44.11)</p>
<p class=MsoToc1>129.120 ms  139.263 ms  129.603 ms</p>
<p>  2  tarn-fl-gwl.netcom.net (163.179.44.254)</p>
<p class=MsoToc1>29.584 ms  129.328 ms  149.578 ms</p>
<p>  3  hl-O.mig-fl-gwl.netcom.net (165.236.144.110)</p>
<p class=MsoToc1>219.595 ms  229.306 ms  209.602 ms</p>
<p>  4  a5-0-0-7.was-dc-gwl.netcom.net (163.179.235.121)</p>
<p class=MsoToc1>179.248 ms  179.521 ms  179.694 ms</p>
<p>  5  h2-0.mae-east.netcom.net (163.179.136.10)</p>
<p class=MsoToc1>179.274 ms  179.325 ms  179.623 ms</p>
<p>  6  h2-0.mae-east.netcom.net (163.179.136.10)</p>
<p class=MsoToc1>169.443 ms  199.318 ms  179.601 ms</p>
<p>  7  cpe3-fddi-0.washington.cw.net (192.41.177.180) 189.529 ms</p>
<p>core6-seria!5-l-0.Washington.cw.net</p>
<p class=MsoToc1>(204.70.1.221) 209.496 ms  209.247 ms</p>
<p>  8  bordercore2.Boston.cw.net (166.48.64.1)</p>
<p class=MsoToc1>209.486 ms  209.332 ms  209.598 ms</p>
<p>  9  hill-associatesinc-internet.Boston.cw.net (166.48.67.54)</p>
<p class=MsoToc1>229.602 ms  219.510 ms *</p>
<p> 10  syrup.hill.corn (208.162.106.3) 239.744 ms 239.348 m 219.607 ms</p>
<p>bsd: $</p>
<p align=center style='text-align:center;'>Рис. 4.10. Выдача traceroute с повторяющимися 
  узлами</p>
<p style='text-align:justify;'>На рис. 4.10 показано еще одно интересное явление. 
  Вы видите, что в узле 7 маршрут изменился после первой попытки. Возможно, это 
  было вызвано тем, что маршрутизатор в узле 6 выполнил какие-то действия по балансированию 
  нагрузки. А возможно, что узел среЗ-fddi-0 .washington.cw.net за время, прошедшее 
  с момента первой попытки, успел «отключиться», и вместо него был использован 
  маршрутизатор с адресом core6-serial5-l-0.Washington.cw.net.</p>
<p style='text-align:justify;'>Еще одна проблема, встречающаяся, к сожалению, 
  все чаще, состоит в том, что маршрутизаторы полностью блокируют все ICMP-сообщения. 
  Некоторые организации, ошибочно полагая, что ICMP-сообщения несут какую-то опасность, 
  отключают их. В таких условиях traceroute становится бесполезной, поскольку 
  первый же такой узел, встретившийся на маршруте к получателю, с точки зрения 
  traceroute Ведет себя как «черная дыра». Никакая информация от последующих узлов 
  не доходит, так как этот маршрутизатор отбрасывает и сообщение «истекло время 
  в пути», и сообщение «порт недоступен».</p>
<p style='text-align:justify;'>Следующая проблема при работе с traceroute - это 
  асимметрия маршрутов. Запуская traceroute, вы получаете маршрут от пункта отправления 
  до пункта назначения, но нет гарантии, что датаграмма, отправленная из пункта 
  назначении будет следовать тем же маршрутом. Хотя кажется естественным предположении 
  о том, что почти все маршруты одинаковы, в действительности, как показано в 
  работе [Paxson 1997], 49% изученных маршрутов демонстрируют асимметрию хотя 
  бы в одном промежуточном узле.</p>
<p style='text-align:justify;'><i>Примечание:</i> С помощью опции -s, которая 
  устанавливает режим свободной маршрутизации, заданной источником (loose source 
  routing) oт пункта назначения в пункт отправления, теоретически можно получить 
  оба маршрута. Но, как отмечает Джекобсон в комментариях к исходному тексту trace-route, 
  количество маршрутизаторов, которые некорректно выполняют маршрутизацию, заданную 
  источником, настолько велико, что этот метод на практике не работает. В главе 
  8 книги [Stevens 1994] объясняетсясуть метода и приводится пример его успешного 
  применения.</p>
<p style='text-align:justify;'>В другой работе Паксон отмечает, что асимметричные 
  маршруты возникают также из-за эффекта «горячей картофелины» [Paxson 1995].</p>
<p style='text-align:justify;'><i>Примечание:</i> Этот эффект состоит в следующем. 
  Предположим, что хост А, расположенный на восточном побережье Соединенных Штатов, 
  отправляет датаграмму хосту В на западном побережье. Хост А подключен к Internet 
  через провайдера 1, а хост В&nbsp;- через провайдера 2. Допустим, что у обоих 
  провайдеров есть опорные сети, проходящие через всю страну. Поскольку полоса 
  пропускания опорной сети - это дефицитный ресурс, провайдер 1 пытается доставить 
  датаграмму хосту в сети провайдера 2, пользуясь его же опорной сетью. Но точно 
  также, когда хост В отвечает, провайдер 2 пытается доставить ответ на противоположное 
  побережье, пользуясь опорной сетью провайдера 1. Отсюда и асимметрия.</p>
<h3><a name="p2">Программа </a>tracert в системе Windows</h3>
<p style='text-align:justify;'>До сих пор описывалась UNIX-версия программы traceroute. 
  Очень похожее средство - tracert - есть и в различных версиях операционной системы 
  Windows. Программа tracert работает аналогично traceroute, но для определения 
  маршрута используются не UDP-датаграммы, а эхо-запросы протокола ICMP (как в 
  программе ping). В результате хост-получатель возвращает эхо-ответ ICMP, а не 
  сообщение о недоступности порта. Промежуточные маршрутизаторы по-прежнему возвращают 
  сообщение «истекло время в пути».</p>
<p style='text-align:justify;'><i>Примечание:</i> В последних версиях traсеrоutе 
  есть опция -1, имитирующая такое же поведение. Подобную версию можно получить 
  на сайте ftp://ftp.ee.lbl.gov/traceroute.tar.Z.</p>
<p style='text-align:justify;'>Наверное, это изменение сделано исходя из соображения 
  о том, что UDP-датаграммы часто отфильтровываются маршрутизаторами, тогда как 
  эхо-запросы и эхо-ответы ICMP, используемые программой ping, менее подвержены 
  этому.Исходная версия traceroute также применяла эхо-запросы для определения 
  маршрута, но потом они были заменены UDP-датаграммами, поскольку многие маршрутизаторы 
  строго следовали предписанию RFC 792 [Postel 1981], требую­щему не посылать 
  ICMP-сообщения в ответ на ICMP-сообщения [Jacobson 1999]. Действующее ныне RFC 
  1122 [Braden 1989] указывает, что ICMP-сообщение не должно посылаться в ответ 
  на ICMP-сообщение об ошибке, но tracert по-прежнему встречает трудности в старых 
  моделях маршрутизаторов.</p>
<p style='text-align:justify;'>В RFC 1393 [Malkin 1993] предложено добавить новую 
  опцию в протокол IP и отдельное ICMP-сообщение, чтобы гарантировать надежность 
  traceroute (а заодно и решить некоторые другие задачи), но, так как в маршрутизаторы 
  и программное обеспечение хостов пришлось бы вносить изменения, этот метод не 
  по­лучил распространения.</p>
<h3><a name="p3">Резюме</a></h3>
<p style='text-align:justify;'>Утилита traceroute - очень полезный инструмент 
  для диагностики сетевых ошибок, изучения маршрутизации и исследования топологии 
  сети. Топология Internet нередко достаточно запутанна, и это может быть причиной 
  неожиданного поведения приложений. С помощью traceroute зачастую удается обнаружить 
  аномалии в сети, из-за которых программа ведет себя странно.</p>
<p style='text-align:justify'>Программы traceroute и tracert работают путем отправки 
  хосту назначения датаграммы с последовательно увеличивающимся значением в поле 
  TTL. Затем они отслеживают приходящие от промежуточных маршрутизаторов ICMP-сообщения 
  «истекло время в пути». Разница в том, что traceroute посылает UDP-датаграммы, 
  a tracert&nbsp;- эхо-запросы ICMP.</p>
<hr><div align="right"><a href="adv35.htm#top">Вверх</a> | <a href="index.htm">Содержание</a> | <a href="adv34.htm">Назад</a> | <a href="adv36.htm">Далее</a></div>
</body>
</html>
