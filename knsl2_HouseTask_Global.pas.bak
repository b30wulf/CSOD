unit knsl2_HouseTask_Global;
interface
uses
 Windows, Classes, SysUtils,SyncObjs,stdctrls,comctrls,utltypes,utlbox,utlconst,utlmtimer,
 utldatabase,knsl3HolesFinder,knsl2qweryportpull,knsl2qweryarchmdl,
 knsl2module,knsl2meter,knsl3EventBox,knsl5config,knsl2IRunnable,utldynconnect,knsl2CThreadPull,

    knsl2ss101meter,    //√‡ÌÒËÒÚÂÏ‡ ——101: »—œŒÀ‹«”≈“—ﬂ Œƒ»Õ œ–Œ“Œ ŒÀ ——301
    knsl2ss301f3meter,  //√‡ÌÒËÒÚÂÏ‡ ——301: »—œŒÀ‹«”≈“—ﬂ Œƒ»Õ œ–Œ“Œ ŒÀ ——301

    knsl2ce6850meter,
    knsl2ce6822meter,

    knsl2ee8005meter, //¬«›œ ››8003,››8005,››8007  : »—œŒÀ‹«”≈“—ﬂ Œƒ»Õ œ–Œ“Œ ŒÀ

    knsl2BTIModule,   // ÓÌÛÒ≈
    knsl2a2000meter,  // ÓÌÛÒ¡˚Ú

    knsl2MIRT1Meter,   //Ã»–“≈  ‚Â.1
    knsl2MIRT1W2Meter, //Ã»–“≈  ‚Â.2

    knsl2CE301BYMeter, //›Õ≈–√ŒÃ≈–¿ —≈301
    knsl2CE102Meter,   //›Õ≈–√ŒÃ≈–¿ —≈102
    knsl2CE208BYMeter, //›Õ≈–√ŒÃ≈–¿ —≈208
    knsl2MES3meter;
 type

    CMeterTaskGlobal = class(IRunnable)
     private
      meter      : CMeter;
      outMsg     : CMessage;
      inMsg      : CMessage;
      connection : IConnection;
     protected
      procedure getInputBuffer(var V :PCMessageBuffer);
      procedure getIntBuffer(var V :PCIntBuffer);

     public
      constructor Create(var value:CMeter;var vParent:IRunnable;var vConnection:IConnection);
      destructor Destroy;override;
      function run:Integer;override;

      function getOutMsg:Integer;
      procedure getIntBufferADR(var V :PCIntBuffer);
//      function runCloseSession: Integer;
    End;


    CHouseTaskGlobal = class(IRunnable)
     private
      dtBegin      : TDateTime;
      dtEnd        : TDateTime;
      cmd          : Integer;
      gid          : Integer;
      aid          : Integer;
      mid          : Integer;
      isFind       : Integer;
      ErrorPercent : double;
      meterPull    : CThreadPull;
      portPull     : TThreadList;
      taskUndex    : Integer;
      inMessageBuffer : CMessageBuffer;
      intBuffer    : CIntBuffer;
      inBufferADR  : CIntBuffer;
     private
      function getPortPull(plid:Integer):CPortPull;
      function isManyErrors(pDb:CDBDynamicConn;aid:Integer;vErrorPercent:double):boolean;
      function cmdToCls(cmd:Integer):Integer;
      function getL2Instance(dynConnect:CDBDynamicConn;mid:Integer):CMeter;
     public
      function getAboID:integer;
      function getParamID:integer;

      constructor Create(vDtBegin,vDtEnd:TDateTime;
                              vCmd:Integer;
                              vGid :Integer;
                              vAid :Integer;
                              vMid :Integer;
                              vIsFind : Integer;
                              vErrorPercent : double;
                              vPortPull:TThreadList;
                              vTaskIndex:Integer;
                              var vMeterPull:CThreadPull;
                              var vParent : IRunnable);

      destructor Destroy;override;
      function run:Integer;override;
    End;

implementation

constructor CMeterTaskGlobal.Create(var value:CMeter;{vPortPull:TThreadList;}var vParent:IRunnable;var vConnection:IConnection);
Begin
    meter    := value;
    id       := meter.m_nP.m_swMID;
    //portpull := vPortPull;
    state    := TASK_STATE_RUN;
    parent   := vParent;
    connection := vConnection;
End;

destructor CMeterTaskGlobal.Destroy;
Begin
    inherited Destroy;
    //if meter<>nil then meter.Destroy;
End;

procedure CMeterTaskGlobal.getInputBuffer(var V :PCMessageBuffer);
begin
  if parent is CHouseTaskGlobal then
    V := @(CHouseTaskGlobal(parent).inMessageBuffer)
  else V := nil;
end;
procedure CMeterTaskGlobal.getIntBuffer(var V :PCIntBuffer);
begin
  if parent is CHouseTaskGlobal then
    V := @(CHouseTaskGlobal(parent).intBuffer)
  else V := nil;
end;

procedure CMeterTaskGlobal.getIntBufferADR(var V :PCIntBuffer);
begin
  if parent is CHouseTaskGlobal then
    V := @(CHouseTaskGlobal(parent).inBufferADR)
  else V := nil;
end;

function CMeterTaskGlobal.run:Integer;
Var
    //connection : IConnection;
    //portpull   : CPortPull;
    index      : Integer;
    //pull       : CPortPull;
    i          : Integer;
    res        : boolean;
    getResult  : Integer;
    pDb        : CDBDynamicConn;
Begin
    index := 0;
    getResult := -1;
    try
    pDb  := meter.getDbConnect;
    while meter.send(outMsg) do
    Begin
     if state=TASK_STATE_KIL then
     Begin
      if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTask TASK KILLED!!!');
      exit;
     End;
     if(outMsg.m_swLen<>0) then
     Begin
      connection.put(outMsg);

      //if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTask MSG PUT Complette. Len:'+IntToStr(outMsg.m_swLen));
      if EventBox<>Nil then EventBox.FixMessage(ET_NORMAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTask MSG PUT Complette... MSG:>',outMsg);
      res := true;
      i   := 0;
      getResult := -1;
//ƒÀﬂ —≈301 œ¿–¿Ã≈“– ƒÀﬂ «¿ –€“»ﬂ —Œ≈ƒ»Õ≈Õ»ﬂ ¡≈« Œ∆»ƒ¿Õ»ﬂ Œ“¬≈“¿/////
     if(outMsg.m_sbyTypeIntID= 3)then
        begin
        getResult:=0;
        end
//////////////////////////////////////////////////////////////////////
     else
      while getResult<>0 do
      Begin
        getResult := connection.get(inMsg);
        //Normal get
        if getResult=0 then
        Begin
         //if EventBox<>Nil then EventBox.FixMessage(ET_RELEASE,'('+IntToStr(getId)+')CMeterTask MSG GET Complette. MSG:>',inMsg);
         if EventBox<>Nil then EventBox.FixMessage(ET_NORMAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTask MSG GET Complette... MSG:>',inMsg);
         if meter.EventHandler(inMsg) then
         Begin
          //with meter.m_nP do pDb.setKvarQueryQroup(M_SWABOID,m_sddPHAddres);
//           if (meter.m_nT.B1 = True)then
//            begin
             with meter.m_nP do pDb.setQueryState(M_SWABOID,m_swMID,QUERY_STATE_OK);
             if EventBox<>Nil then EventBox.FixEvents(ET_RELEASE,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTask MSG GET Complette. Len:'+IntToStr(inMsg.m_swLen));
             break;
//            end
{           else
            begin
             with meter.m_nP do pDb.setQueryState(M_SWABOID,m_swMID,QUERY_STATE_ER);
             if EventBox<>Nil then EventBox.FixEvents(ET_RELEASE,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTask MSG GET Complette. Len:'+IntToStr(inMsg.m_swLen));
             break;
            end}
         End else
         Begin
          //pDb.setDescQueryQroup(meter.m_nP.M_SWABOID,meter.m_nP.m_schName,' ‡‰ ÓÚ·Ó¯ÂÌ!',TASK_QUERY);
          getResult := -1;
          //if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTask Error In GET!!!. Len:'+IntToStr(inMsg.m_swLen));
         End;
        End;
        //Connect Error
        if getResult=2 then
        Begin
          //with meter.m_nP do pDb.setKvarQueryQroup(M_SWABOID,m_sddPHAddres);
          with meter.m_nP do
          begin
          pDb.setQueryState(M_SWABOID,m_swMID,QUERY_STATE_ER);
          pDb.addErrorArch(M_SWABOID,m_swMID);
          end;
         if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTask MSG Skip. Error In Channel!!! ');
         break;
        End;
        inc(i);
        if i>meter.m_nP.m_sbyRepMsg then
        Begin
         //with meter.m_nP do pDb.setKvarQueryQroup(M_SWABOID,m_sddPHAddres);
         with meter.m_nP do
         begin
         pDb.setQueryState(M_SWABOID,m_swMID,QUERY_STATE_ER);
         pDb.addErrorArch(M_SWABOID,m_swMID);
         end;
         getResult := -1;
         break;
        End;        //Repeat message if not get
        connection.put(outMsg);
        if EventBox<>Nil then EventBox.FixMessage(ET_CRITICAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTask.Run Repeat '+IntToStr(i)+' of '+IntToStr(meter.m_nP.m_sbyRepMsg)+'    MSG:>',outMsg);
        //sleep(meter.m_nP.m_swRepTime*1000);
        //if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTask.Run Repeat '+IntToStr(i)+' of '+IntToStr(meter.m_nP.m_sbyRepMsg)+':> ');
      End;
      //if EventBox<>Nil then EventBox.FixMessage(ET_RELEASE,'('+IntToStr(getId)+')CMeterTask MSG GET:> ',outMsg);
     End else
     Begin
      index := index + 1;
      //if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(meter.m_nP.M_SWABOID)+'/'+meter.m_nP.m_sddPHAddres+')CMeterTask MSG PUT Complette.');
     End;
    End; 
    //pDb.setDtEndInQueryQroup(meter.m_nP.M_SWABOID,Now,TASK_QUERY_COMPL);
    //connection.iclose;
    //pDb.Disconnect;
    //if EventBox<>Nil then EventBox.FixEvents(ET_RELEASE,'('+IntToStr(getId)+')CMeterTask STOP. '+IntToStr(index)+' msg. ');
    //except
    finally
     //connection.iclose;
     //m_pDB.DiscDynConnect(pDb);
     Result := getResult;
     //if EventBox<>Nil then EventBox.FixEvents(ET_RELEASE,'('+IntToStr(meter.m_nP.M_SWABOID)+'Í.'+meter.m_nP.m_sddPHAddres+')CMeterTask ERROR!!!. '+IntToStr(index)+' msg. ');
    end;
End;

function CMeterTaskGlobal.getOutMsg:Integer;
begin
  Result := -1;
  FillChar(outMsg, SizeOf(outMsg), 0);
  if not meter.send(outMsg) then Exit;
  Result := 0;
end;


constructor CHouseTaskGlobal.Create(vDtBegin,vDtEnd:TDateTime;
                              vCmd:Integer;
                              vGid :Integer;
                              vAid :Integer;
                              vMid :Integer;
                              vIsFind : Integer;
                              vErrorPercent : double;
                              vPortPull:TThreadList;
                              vTaskIndex:Integer;
                              var vMeterPull:CThreadPull;
                              var vParent : IRunnable);
Begin
      dtBegin      := vDtBegin;
      dtEnd        := vDtEnd;
      cmd          := vCmd;
      gid          := vGid;
      aid          := vAid;
      mid          := vMid;
      isFind       := vIsFind;
      portPull     := vPortPull;
      meterPull    := vMeterPull;
      id           := aid;
      state        := TASK_STATE_RUN;
      parent       := vParent;
      ErrorPercent := vErrorPercent;
End;
destructor CHouseTaskGlobal.Destroy;
Begin
    inherited;
End;
function CHouseTaskGlobal.getAboID:integer;
Begin
    Result := aid;
End;
function CHouseTaskGlobal.getParamID:integer;
Begin
    Result := cmd;
End;
function CHouseTaskGlobal.run:Integer;
Var
    i,j      : Integer;
    pump     : CDataPump;
    pMT      : PCMeter;
    pTbl     : SQWERYMDL;
    meter    : CMeter;
    index    : Integer;
    runnble  : IRunnable;
    mettask  : CMeterTaskGlobal;
    pDb      : CDBDynamicConn;
    pDM      : CDBDynamicConn;
    pHF      : CHolesFinder;
    pTable   : SL2TAG;
    data     : TThreadList;
    vList    : TList;
    pD       : CJoinL2;
    pull     : CPortPull;
    res      : Integer;
    connection : IConnection;
    findData : Boolean;
    dateEnd,dateBegin  : TDateTime;
Begin
    try
    findData := False;
    res      := 0;
    runnble  := nil;
    if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask Begin...');
    data := TThreadList.Create;
    pDb  := m_pDB.getConnection;
    pDb.GetAbonL2Join(gid,aid,data);

    if ((isFind=0)and(mid=-1)) then pDb.DelArchData(dtEnd,dtBegin,aid,cmd);
    //if isFind=0 then
    pDb.setQueryState(aid,mid,QUERY_STATE_NO);
    vList := data.LockList;
    //pDb.setDtBeginEndInQueryQroup(aid,now,0,TASK_QUERY);

    dateEnd:=now;
    pDb.setDtBeginEndInQueryQroup(aid,now,dateEnd,TASK_QUERY_WAIT);


    if (vList.count>0) then
    Begin
     pD := vList[0];
     pull := getPortPull(pD.m_swPullID);
     if pull=nil then exit;
     connection := pull.getConnection;
     connection.clearHistory;
    End;
    if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask Device Received.');

   //for i:=0 to vList.count-1 do
    while i<vList.count do
     Begin
      try
      if (state=TASK_STATE_KIL) or (parent.getTaskState=TASK_STATE_KIL) then 
      Begin
       if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(aid)+')CHouseTask TASK KILLED!!!');
       pDb.setDtEndInQueryQroup(aid,now,TASK_HAND_STOP);
       exit;
      End;
      pD := vList[i];
      pTbl.m_snAID  := aid;
      pTbl.m_snVMID := pD.m_swVMID;
      pTbl.m_snMID  := pD.m_swMID;
      if(mid<>-1) then
      Begin
       if (mid<>pD.m_swMID) then continue;
      End;
      pDM := m_pDB.getConnection;
      meter := getL2Instance(pDM,pTbl.m_snMID);
      if cmdToCls(cmd)=CLS_MGN then       //ƒŒ·‡‚ËÚ¸ ‡‚ÚÓËÁ‡ˆË˛ ‰Îˇ —E301
        begin
        if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'YES meter.PObserver.LoadParamQS(cmd)');

        if meter is CSS301F3Meter then       //ƒÎˇ ——301 Ô‡‡ÏÂÚ˚
          begin
          if (cmd=QRY_ENERGY_SUM_EP) then
          //meter.PObserver.LoadParamQS(cmd);
          begin
          meter.PObserver.AddGraphParam(QRY_KPRTEL_KE, 0, 0, 0, 1);
          meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 0, 0, 1);
          meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 1, 0, 1);
          meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 2, 0, 1);
          meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 3, 0, 1);
          meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 4, 0, 1);
          end
          else
          meter.PObserver.LoadParamQS(cmd);
          end
        else if meter is CCE102Meter then       //ƒÎˇ —≈102 Ô‡‡ÏÂÚ˚
          begin
            meter.PObserver.LoadParamQS(cmd);
            meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 1, 0, 1);
            meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 2, 0, 1);
            meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 3, 0, 1);
          end
        else if meter is CCE6822Meter then       //ƒÎˇ —≈102 Ô‡‡ÏÂÚ˚
          begin
            //meter.PObserver.LoadParamQS(cmd);
            if (cmd=QRY_ENERGY_SUM_EP) then
            begin
            meter.PObserver.AddGraphParam(QRY_POINT_POS, 0, 0, 0, 1);
            meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 1, 0, 1);
            meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 2, 0, 1);
            meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 3, 0, 1);
            meter.PObserver.AddGraphParam(QRY_ENERGY_SUM_EP, 0, 4, 0, 1);
            end
            else
            meter.PObserver.LoadParamQS(cmd);
          end
        else if meter is CCE301BYMeter then       //ƒÎˇ —≈301 Ô‡‡ÏÂÚ˚
          begin
            meter.PObserver.AddGraphParam(QRY_AUTORIZATION, 0, 0, 0, 1);
            meter.PObserver.AddGraphParam(QRY_AUTORIZATION, 1, 0, 0, 1);
            meter.PObserver.AddGraphParam(QRY_AUTORIZATION, 2, 0, 0, 1);
            meter.PObserver.LoadParamQS(cmd);
            meter.PObserver.AddGraphParam(QRY_EXIT_COM, 0, 0, 0, 1);
          end
        else
         begin
         meter.PObserver.LoadParamQS(cmd);
         end;
        end
      else
      Begin
       pHF  := CHolesFinder.Create(pDb);
       pump := CDataPump.Create(nil,pHF,meter,@pTbl,cmd);
       if isFind=1 then findData := pump.PrepareFind(dtBegin,dtEnd,pTbl.m_snVMID,cmdToCls(cmd));
       pump.SetPump(dtBegin,dtEnd,pTbl.m_snMID,cmdToCls(cmd),0);
       pump.Start;
       while(pump.Next) do;
      End;
       if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTask QUERY meter π:'+IntToStr(meter.m_nP.m_swMID)+' kv π:'+meter.m_nP.m_sddPHAddres);
       if ((isFind=1) and (findData=false)) then with meter.m_nP do pDb.setQueryState(aid,m_swMID,QUERY_STATE_OK);
       if (isFind=0) or ((isFind=1) and (findData=true)) then
       Begin

        if isManyErrors(pDb,aid,ErrorPercent) then
        Begin
         pDb.setDtEndInQueryQroup(aid,now,TASK_MANY_ERR);
         if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+'/'+meter.m_nP.m_sddPHAddres+')CHouseTask SKIP Query Connection=ERR:>Many Errors In House!!!');
         exit
        End;
          if (i=0) then
           pDb.setDtBeginEndInQueryQroup(aid,now,now,CALL_STATE);//—ÓÒÚÓˇÌËÂ ‚˚ÁÓ‚‡
        connection.iconnect(meter.m_nP.m_sPhone);
        if connection.getConnectionState=PULL_STATE_ERR then
        Begin
         pDb.setDtEndInQueryQroup(aid,now,TASK_CONN_ERR);
         if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+'/'+meter.m_nP.m_sddPHAddres+')CHouseTask SKIP Query Connection=ERR:>');
         exit
        End;
        if (i=0) and (connection.getConnectionState=PULL_STATE_CONN) then
           begin
           dateBegin:=now;
           pDb.setDtBeginEndInQueryQroup(aid,dateBegin,0,TASK_QUERY);//Õ¿◊¿ÀŒ Œœ–Œ—¿
           end
           else pDb.setDtBeginEndInQueryQroup(aid,dateBegin,now,TASK_QUERY);//Õ¿◊¿ÀŒ Œœ–Œ—¿
           mettask := CMeterTaskGlobal.Create(meter,IRunnable(self),connection);
           res := mettask.run();
        inc(i);
       End;
      except
       pDb.setQueryState(aid,meter.m_nP.m_swMID,QUERY_STATE_ER);
       pDb.addErrorArch(aid,meter.m_nP.m_swMID);
       if EventBox<>Nil then EventBox.FixEvents(ET_CRITICAL,'('+IntToStr(aid)+')CHouseTaskGlobal Error in meter π:'+IntToStr(meter.m_nP.m_swMID)+' kv π:'+meter.m_nP.m_sddPHAddres);
      end;
       m_pDB.DiscDynconnect(pDM);
       if mettask<>nil then mettask.Destroy;
       if pHF<>nil then pHF.Destroy;
       if pump<>nil then pump.Destroy;
       if meter<>nil then meter.Destroy;
       pD.Destroy;
      End;

     if res<>2 then
     begin
         pDb.setDtEndInQueryQroup(aid,now,TASK_QUERY_COMPL);    // ŒÕ≈÷ Œœ–Œ—¿
     end
      else pDb.setDtEndInQueryQroup(aid,now,TASK_CONN_ERR);

     finally
     if EventBox<>Nil then EventBox.FixEvents(ET_NORMAL,'('+IntToStr(aid)+')CHouseTaskGlobal End.');
     data.UnLockList;
     data.Destroy;
     m_pDB.DiscDynConnect(pDb);
     if (connection<>nil) then  connection.iclose;
    end;
End;


function CHouseTaskGlobal.isManyErrors(pDb:CDBDynamicConn;aid:Integer;vErrorPercent:double):boolean;
Var
    data : QGABONS;
    quality : double;
Begin
    data := QGABONS.Create;
    data.ALLCOUNTER := 1000;
    data.ISOK := 0;
    data.ISER := 0;
    pDb.GetQueryAbonsError(aid,data);
    quality := 100*data.ISER/data.ALLCOUNTER;
    if quality>vErrorPercent then
    Begin
     Result := true;
     data.Destroy;
     exit;
    End;
    data.Destroy;
    Result := false;
End;

function CHouseTaskGlobal.getPortPull(plid:Integer):CPortPull;
Var
    vList : TList;
    i     : Integer;
    pD    : CPortPull;
begin
    Result := nil;
    vList := portpull.LockList;
    try
    for i:=0 to vList.Count-1 do
    Begin
     pD := vList[i];
     if pD.getPullID=plid then
     Begin
      Result := pD;
      exit;
     End;
    End;
    finally
     portPull.UnLockList;
    end;
end;

function CHouseTaskGlobal.getL2Instance(dynConnect:CDBDynamicConn;mid:Integer):CMeter;
Var
    meter  : CMeter;
    pTable : SL2TAG;
Begin
    if (dynConnect.GetMMeterTableEx(mid,pTable)) then
    Begin

    case pTable.m_sbyType of
       MET_SS101         : meter := CSS301F3Meter.Create;  //√‡ÌÒËÒÚÂÏ‡ ——101: »—œŒÀ‹«”≈“—ﬂ Œƒ»Õ œ–Œ“Œ ŒÀ ——301
       MET_SS301F3       : meter := CSS301F3Meter.Create;  //√‡ÌÒËÒÚÂÏ‡ ——301: »—œŒÀ‹«”≈“—ﬂ Œƒ»Õ œ–Œ“Œ ŒÀ ——301

       MET_CE6850        : meter := CCE6850Meter.Create;
       MET_CE6822        : meter := CCE6822Meter.Create;

       MET_EE8003        : meter := CEE8005Meter.Create;  //¬«›œ ››8003  : »—œŒÀ‹«”≈“—ﬂ Œƒ»Õ œ–Œ“Œ ŒÀ
       MET_EE8005        : meter := CEE8005Meter.Create;  //¬«›œ ››8005  : »—œŒÀ‹«”≈“—ﬂ Œƒ»Õ œ–Œ“Œ ŒÀ
       MET_EE8007        : meter := CEE8005Meter.Create;  //¬«›œ ››8007  : »—œŒÀ‹«”≈“—ﬂ Œƒ»Õ œ–Œ“Œ ŒÀ

       MET_CE102         : meter := CCE102Meter.Create;    //›Õ≈–√ŒÃ≈–¿ —≈102
       MET_CE301BY       : meter := CCE301BYMeter.Create;  //›Õ≈–√ŒÃ≈–¿ —≈301
       MET_CE303         : meter :=  CCE301BYMeter.Create; //›Õ≈–√ŒÃ≈–¿ —≈303

       MET_MIRT1         : meter := CMIRT1Meter.Create;    //Ã»–“≈  ‚Â.1
       MET_MIRTW2        : meter := CMIRT1W2Meter.Create;  //Ã»–“≈  ‚Â.2

       MET_CRCRB         : meter := CBTIMeter.Create;      // ÓÌÛÒ≈
       MET_A2000         : meter := CA2000Meter.Create;    // ÓÌÛÒ¡˚Ú

       MET_MES1          : meter := MES3Meter.Create;      //–Ó‚‡ÎÂÌÚ Ã≈—1
       MET_MES3          : meter := MES3Meter.Create;      //–Ó‚‡ÎÂÌÚ Ã≈—3

       End;
      End;
      if meter<>nil then
      Begin
       if m_nCF.QueryType<>QWR_QWERY_SRV then meter.BOX_L3_BY := BOX_L3 else
       if m_nCF.QueryType= QWR_QWERY_SRV then meter.BOX_L3_BY := BOX_CSRV;
       meter.setDbConnect(dynConnect);
       meter.Init(pTable);
      End;
      Result := meter;
End;

function CHouseTaskGlobal.cmdToCls(cmd:Integer):Integer;
Begin
     if(((cmd>=QRY_ENERGY_SUM_EP) and (cmd<=QRY_ENERGY_SUM_EP)) or
        (cmd=QRY_DATA_TIME) or
        (cmd=QRY_LOAD_ALL_PARAMS) or
        ((cmd=QRY_ENTER_COM)or(cmd=QRY_EXIT_COM)) or
        ((cmd>=QRY_MGAKT_POW_S) and (cmd<=QRY_FREQ_NET))) then
     Begin
      Result := CLS_MGN;
      exit;
     End else
     if(((cmd>=QRY_ENERGY_DAY_EP) and (cmd<=QRY_ENERGY_DAY_RM)) or
        ((cmd>=QRY_NAK_EN_DAY_EP) and (cmd<=QRY_NAK_EN_DAY_RM))) then
     Begin
      Result := CLS_DAY;
      exit;
     End else
     if(((cmd>=QRY_ENERGY_MON_EP) and (cmd<=QRY_ENERGY_MON_RM)) or
        ((cmd>=QRY_NAK_EN_MONTH_EP) and (cmd<=QRY_NAK_EN_MONTH_RM))) then
     Begin
      Result := CLS_MONT;
      exit;
     End else
     if((cmd>=QRY_SRES_ENR_EP) and (cmd<=QRY_SRES_ENR_RM)) then
     Begin
      Result := CLS_GRAPH48;
      exit;
     End else
     if(cmd=QRY_DATA_TIME) then
     Begin
      Result := CLS_TIME;
      exit;
     End else
     if((cmd>=QRY_JRNL_T1) and (cmd<=QRY_JRNL_T4)) then
     Begin
      Result := CLS_EVNT;
      exit;
     End
End;

end.
